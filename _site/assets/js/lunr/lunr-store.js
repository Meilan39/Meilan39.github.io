var store = [{
        "title": "C89 Parser Implementaion in C",
        "excerpt":" ","categories": ["projects"],
        "tags": [],
        "url": "/projects/C89-Parser/",
        "teaser": null
      },{
        "title": "General Purpose Numerical Optimization Solver",
        "excerpt":" ","categories": ["projects"],
        "tags": [],
        "url": "/projects/Gpsolve/",
        "teaser": null
      },{
        "title": "Path Planning Interface for Differential and Holonomic VEX Robots",
        "excerpt":"説明 このプロジェクトでは、差動駆動およびホロノミック Vex ロボットの滑らかな経路生成における Cubic Hermite Spline の応用について詳述します。経路生成は Desmos の使用により簡略化されています。また、本プロジェクトでは、初速度と最終速度、初期加速度と最終加速度、移動距離を与えたときの速度プロファイルを生成する簡単な方法も提案しています。これは高校最終学年の間に取り組んだプロジェクトであり、多くの改善の余地が残されていますが、その一部を本記事で紹介します。 リンク GitHubリポジトリ プレゼンテーション 開始点・終了点および速度を可視化できる通常のPath Plannerバージョン。 Path Planner 開始点・中間点・終了点および速度を可視化できるPath Planner Plusバージョン。Path Planner Plusは、長いまたは複雑な経路で追加の中間点が必要な場合に最適です。 Path Planner Plus 使用ツール C++ Desmos 動機 VEX Robotics Competitionでは、「自律制御期間」と呼ばれる時間帯があり、ロボットは事前にプログラムされたルーチンを実行して得点します。多くのチームは、エンコーダ距離や時間ベースのアプローチを用いて、個別の直線経路を連続で実行しています。しかし、この方法では、目的地と現在地の間に障害物がある場合、複数の経路を順に実行する必要があり、非効率で大きな誤差が生じる可能性があります。このプロジェクトの動機は、2点間の連続的かつ柔軟な経路を簡単に生成できるインターフェースを作成することでした。 背景 三次エルミート補間 基本的なアイデアは、開始点と終了点、およびそれぞれに対応する「速度」ペアを使用して柔軟な経路を生成することです。開始点と終了点は経路の端点を定義し、「速度」はそれらの向きが経路の曲率に与える影響を示します。「速度」はロボットの実際の速度を意味するのではなく、端点の向きが経路形状に与える「重み」として扱われます。この問題は補間問題であり、ここではエルミートスプライン補間を用いています。エルミートスプラインは、数学的にはよく知られるベジエ曲線と同等とみなすことができますが、開始点と終了点の向きを明示的に定義できる点で、ロボット経路計画においてより適しています。一方、ベジエ曲線では、中間点が物理的意味を持たずに曲率を定義します。 上述のように、エルミートスプラインは以下の4つの情報から生成されます： $P_0$ ::= 開始点の x-y 座標 $P_1$ ::= 終了点の x-y 座標 $P_2$ ::= 開始点の「速度」 $P_3$...","categories": ["projects"],
        "tags": [],
        "url": "/projects/Path-Planner/",
        "teaser": null
      }]
